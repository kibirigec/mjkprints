/**
 * PayPal Webhook Test Script
 * Simulates PayPal webhook events for testing
 */

import { config } from 'dotenv'
import fetch from 'node-fetch'

// Load environment variables
config()

async function testPayPalWebhook() {
  console.log('üß™ Testing PayPal Webhook Processing...\n')

  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'
  const webhookUrl = `${baseUrl}/api/webhooks/paypal`

  console.log(`Webhook URL: ${webhookUrl}`)

  // Test webhook payload - simulating a payment capture completed event
  const testPayload = {
    id: 'WH-test-event-id',
    event_version: '1.0',
    create_time: new Date().toISOString(),
    resource_type: 'capture',
    event_type: 'PAYMENT.CAPTURE.COMPLETED',
    summary: 'Payment completed for test order',
    resource: {
      id: 'test-capture-id',
      status: 'COMPLETED',
      amount: {
        currency_code: 'USD',
        value: '24.98'
      },
      final_capture: true,
      seller_protection: {
        status: 'ELIGIBLE'
      },
      custom_id: 'test-order-' + Date.now(),
      create_time: new Date().toISOString(),
      update_time: new Date().toISOString(),
      supplementary_data: {
        related_ids: {
          order_id: 'test-paypal-order-id'
        }
      },
      payer: {
        email_address: 'test@mjkprints.com',
        payer_id: 'test-payer-id'
      }
    },
    links: [
      {
        href: `https://api.sandbox.paypal.com/v1/notifications/webhooks-events/WH-test-event-id`,
        rel: 'self',
        method: 'GET'
      }
    ]
  }

  // Mock PayPal webhook headers (normally these would be generated by PayPal)
  const mockHeaders = {
    'paypal-auth-algo': 'SHA256withRSA',
    'paypal-cert-id': 'test-cert-id',
    'paypal-transmission-id': 'test-transmission-id',
    'paypal-transmission-sig': 'test-signature',
    'paypal-transmission-time': new Date().toISOString()
  }

  console.log('1. Testing webhook endpoint availability...')
  
  try {
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...mockHeaders
      },
      body: JSON.stringify(testPayload)
    })

    console.log(`   Response Status: ${response.status}`)
    
    if (response.ok) {
      const responseData = await response.json()
      console.log('‚úÖ Webhook endpoint responded successfully')
      console.log(`   Response: ${JSON.stringify(responseData)}`)
    } else {
      const errorText = await response.text()
      console.log('‚ö†Ô∏è  Webhook endpoint returned error')
      console.log(`   Error: ${errorText}`)
      
      if (response.status === 400 && errorText.includes('signature')) {
        console.log('\nüí° This is expected in testing - webhook signature verification failed')
        console.log('   The webhook handler is working but rejecting unsigned test requests')
        console.log('   In production, PayPal will provide valid signatures')
      }
    }

  } catch (error) {
    console.log('‚ùå Failed to reach webhook endpoint')
    console.error(`   Error: ${error.message}`)
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüîß Troubleshooting Tips:')
      console.log('   - Make sure your development server is running (npm run dev)')
      console.log('   - Check if the webhook endpoint exists at /pages/api/webhooks/paypal.js')
      console.log('   - Verify NEXT_PUBLIC_SITE_URL is set correctly')
    }
  }

  console.log('\n2. Testing webhook signature verification...')
  console.log('   Note: Signature verification requires valid PayPal webhook credentials')
  console.log('   Set PAYPAL_WEBHOOK_ID in your environment variables for full testing')

  console.log('\nüìã Webhook Test Summary:')
  console.log('   - Webhook endpoint exists and responds')
  console.log('   - Event payload processing (check server logs)')
  console.log('   - Signature verification (requires production setup)')

  console.log('\nüí° Next Steps:')
  console.log('   1. Configure webhook endpoint in PayPal Developer Console')
  console.log('   2. Set PAYPAL_WEBHOOK_ID environment variable')
  console.log('   3. Test with real PayPal webhook events')
  console.log('   4. Monitor webhook processing in application logs')
}

// Run the test
testPayPalWebhook().catch(console.error)